package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"strconv"
	"unjammed/graph/model"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input model.OrganizationInput) (*model.Organization, error) {
	var organization model.Organization
	organization.Name = input.Name

	n := len(r.Resolver.OrganizationStore)
	if n == 0 {
		r.Resolver.OrganizationStore = make(map[string]model.Organization)
	}

	// generate unique id
	// id := uuid.New()
	id := strconv.Itoa(n + 1)
	organization.ID = id //.String()
	r.Resolver.OrganizationStore[id] = organization

	return &organization, nil
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*model.Organization, error) {
	organization, ok := r.Resolver.OrganizationStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &organization, nil
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*model.Organization, error) {
	organizations := make([]*model.Organization, 0)
	for idx := range r.Resolver.OrganizationStore {
		organization := r.Resolver.OrganizationStore[idx]
		organizations = append(organizations, &organization)
	}

	return organizations, nil
}
