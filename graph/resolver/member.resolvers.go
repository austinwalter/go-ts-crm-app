package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"strconv"
	"unjammed/graph/model"
)

// CreateMember is the resolver for the createMember field.
func (r *mutationResolver) CreateMember(ctx context.Context, input model.MemberInput) (*model.Member, error) {
	var member model.Member
	member.FirstName = input.FirstName
	member.LastName = input.LastName

	n := len(r.Resolver.MemberStore)
	if n == 0 {
		r.Resolver.MemberStore = make(map[string]model.Member)
	}

	// generate unique id
	// id := uuid.New()
	id := strconv.Itoa(n + 1)
	member.ID = id //.String()
	r.Resolver.MemberStore[id] = member

	return &member, nil
}

// Member is the resolver for the member field.
func (r *queryResolver) Member(ctx context.Context, id string) (*model.Member, error) {
	member, ok := r.Resolver.MemberStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &member, nil
}

// Members is the resolver for the members field.
func (r *queryResolver) Members(ctx context.Context) ([]*model.Member, error) {
	members := make([]*model.Member, 0)
	for idx := range r.Resolver.MemberStore {
		member := r.Resolver.MemberStore[idx]
		members = append(members, &member)
	}

	return members, nil
}
