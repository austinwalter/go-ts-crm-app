package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"strconv"
	"unjammed/graph/model"
)

// CreateEmployment is the resolver for the createEmployment field.
func (r *mutationResolver) CreateEmployment(ctx context.Context, input model.EmploymentInput) (*model.Employment, error) {
	var employment model.Employment

	member, memberOk := r.Resolver.MemberStore[input.MemberID]
	organization, organizationOk := r.Resolver.OrganizationStore[input.OrganizationID]

	if !memberOk {
		return nil, fmt.Errorf("member not found")
	}

	if !organizationOk {
		return nil, fmt.Errorf("organization not found")
	}

	employment.Member = &member
	employment.Organization = &organization

	n := len(r.Resolver.EmploymentStore)
	if n == 0 {
		r.Resolver.EmploymentStore = make(map[string]model.Employment)
	}

	// generate unique id
	// id := uuid.New()
	id := strconv.Itoa(n + 1)
	employment.ID = id //.String()
	r.Resolver.EmploymentStore[id] = employment

	return &employment, nil
}

// Employment is the resolver for the employment field.
func (r *queryResolver) Employment(ctx context.Context, id string) (*model.Employment, error) {
	employment, ok := r.Resolver.EmploymentStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &employment, nil
}

// Employments is the resolver for the employments field.
func (r *queryResolver) Employments(ctx context.Context) ([]*model.Employment, error) {
	employments := make([]*model.Employment, 0)
	for idx := range r.Resolver.EmploymentStore {
		employment := r.Resolver.EmploymentStore[idx]
		employments = append(employments, &employment)
	}

	return employments, nil
}
